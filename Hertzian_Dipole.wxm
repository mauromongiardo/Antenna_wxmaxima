/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 16.04.2 ] */

/* [wxMaxima: input   start ] */
kill(all)$

print("_______________________________________________")$
print("Program: Hertzian_Dipole")$
print("_______________________________________________")$

depends([a11,a12,a21,a22],[r,%theta,phi]);
Ap : matrix([a11,a12],[a21,a22]); 

/* Sigma matrices */

%sigma[0] : matrix([1,0],[0,1])$
%sigma[1] : matrix([0,1],[1,0])$
%sigma[2] : matrix([0,-%i],[%i,0])$
%sigma[3] : matrix([1,0],[0,-1])$

/* Pauli matrices - spherical */

%sigma[r] : matrix([cos(%theta),sin(%theta) * %e^(-%i * phi)],[sin(%theta) * %e^(%i * phi),-cos(%theta)])$
%sigma[%theta] : matrix([-sin(%theta),cos(%theta)  * %e^(-%i * phi)],[cos(%theta) * %e^(%i * phi),sin(%theta)])$
%sigma[phi] : matrix([0,-%i * %e^(-%i * phi)],[%i * %e^(%i * phi),0])$

/* BLOCK NABLASPH - Start */

Nablasph(Ap) := 
block([],

print("Computing Nabla"),

n11ap11 : cos(%theta)*diff(Ap[1,1],r)-sin(%theta)/r * diff(Ap[1,1],%theta),
n12ap21 : sin(%theta)*diff(Ap[2,1],r) + cos(%theta)/r * diff(Ap[2,1],%theta) - %i/(r*sin(%theta))*diff(Ap[2,1],phi),
n12ap21 : n12ap21 * %e^(-%i*phi),
NEp11 : ratsimp(n11ap11 + n12ap21),
NEp11 : trigsimp(NEp11),

n21ap11 : sin(%theta)*diff(Ap[1,1],r) + cos(%theta)/r * diff(Ap[1,1],%theta) + %i/(r*sin(%theta))*diff(Ap[1,1],phi),
n21ap11 : n21ap11 * %e^(%i*phi),
n22ap21 : -cos(%theta)*diff(Ap[2,1],r) + sin(%theta)/r * diff(Ap[2,1],%theta),
NEp21 : ratsimp(n21ap11 + n22ap21),
NEp21 : trigsimp(NEp21),

n11ap12 : cos(%theta)*diff(Ap[1,2],r) - sin(%theta)/r * diff(Ap[1,2],%theta),
n12ap22 : sin(%theta)*diff(Ap[2,2],r) + cos(%theta)/r * diff(Ap[2,2],%theta) - %i/(r*sin(%theta))*diff(Ap[2,2],phi),
n12ap22 : n12ap22 * %e^(-%i*phi),
NEp12 : ratsimp(n11ap12 + n12ap22),
NEp12 : trigsimp(NEp12),


n21ap12 : sin(%theta)*diff(Ap[1,2],r) + cos(%theta)/r * diff(Ap[1,2],%theta) + %i/(r*sin(%theta))*diff(Ap[1,2],phi),
n21ap12 : n21ap12 * %e^(%i*phi),
n22ap22 : -cos(%theta)*diff(Ap[2,2],r) + sin(%theta)/r * diff(Ap[2,2],%theta),
NEp22 : ratsimp(n21ap12 + n22ap22),
NEp22 : trigsimp(NEp22),

NEp : expand((matrix([NEp11, NEp12],[NEp21, NEp22]))),
NEp : factor(trigsimp(NEp))
)$

/* BLOCK NABLASPH - End */

/* BLOCK GRADESPH - Start */

Gradesph(M) := 
block([],

/* print("Divergence"),*/
DivA : expand(1/2 * (M[1,1]+M[2,2])),

/* print("Dot Multiplication with %sigma[r] and taking the trace")$ */
Asph_sr : (M . %sigma[r]),
Asr : expand(1/2 * (Asph_sr[1,1]+Asph_sr[2,2])),
Asr : trigsimp(Asr),
Asr : expand(Asr),

/* print("Dot Multiplication with %sigma[%theta] and taking the trace")$ */
Asph_st : (M . %sigma[%theta]),
Ast : 1/2 * (Asph_st[1,1]+Asph_st[2,2]),
Ast : trigsimp(expand(Ast)),
Ast : expand(Ast),

/* print("Dot Multiplication with %sigma[phi] and taking the trace")$ */
Asph_sp : (M . %sigma[phi]),
Asp : 1/2 * (Asph_sp[1,1]+Asph_sp[2,2]),
Asp : trigsimp(expand(Asp)),
Asp : expand(Asp),

print("_________________________________________________________"),
print("Grade separation"),
print(""),
print("GRADE 0"),
a0 : realpart(DivA),
print('a0," = ",a0),
print("GRADE 1"),
ar : realpart(Asr),
at : realpart(Ast),
ap : realpart(Asp),
print('ar," = ",ar),
print('at," = ",at),
print('ap," = ",ap),
print("GRADE 2"),
Bar : imagpart(Asr),
Bat : imagpart(Ast),
Bap : imagpart(Asp),
print('Bar," = ",Bar),
print('Bat," = ",Bat),
print('Bap," = ",Bap),
print("GRADE 3"),
t0 : imagpart(DivA),
print('t0," = ",t0)
)$

/* BLOCK GRADESPH - End */

print("")$
print("We assume that the dipole and the potential are oriented along z")$

Az : %e^(-j * k *r)/r;

print("")$
print("We use the property that the Pauli matrix of a vector is indipendent")$
print("of the coordinates and we can use the rectangular coordinates form also")$
print("for computation in spherical cooridnates")$

Ap : matrix([Az,0],[0,-Az]);

print("For finding the fields known the potential, we have to proceed in 2 steps:")$
print("1) compute the Pauli matrix of the magnetic field")$
print("2) compute the electric field from the magnetic field")$

print("")$
print("MAGNETIC FIELD IN PAULI MATRIX")$
print("")$
NA  : Nablasph(Ap); 
print("Divergence:")$
divA : 1/2 *(NA[1,1]+NA[2,2]);
print("Nabla wedge A:")$
NWA : NA - divA*%sigma[0];
M : NWA$

print("")$
print("Extracting the Grades")$
Gradesph(M)$

print("")$
print("We can see that i %eta H is only in the phi direction and is ")$
vBap : v * Bap$
Hr : factor(1/%mu * Bar)*c1$
Ht : factor(1/%mu * Bat)*c1$
Hphi : factor(1/%mu * Bap)*c1$
print('Hr," = ",Hr)$
print('Ht," = ",Ht)$
print('Hphi," = ",Hphi)$

print("")$
print("ELECTRIC FIELD")$
print("")$
print("Pauli matrix of H")$
HP : %i * vBap * %sigma[phi];
EFA : j/k * Nablasph(HP)$
EFA :subst(-1,j^2,EFA );
M : EFA$

print("")$
print("Extracting the Grades")$
Gradesph(M)$
print("")$
print("The electric field is equal to")$
Er : ar$
Et : at$
Ep : ap$
Er : subst(-1,j^2,Er)$
Et : subst(-1,j^2,Et)$
Er : factor(Er)*c1$
Er : subst(%eta/v, %mu,Er)$
Et : factor(Et)*c1$
Et : subst(%eta/v, %mu,Et)$
print('Er," = ",Er)$
print('Et," = ",Et)$
print('Ep," = ",Ep)$
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
